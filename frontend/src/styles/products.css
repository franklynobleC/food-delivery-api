.main {
  margin-top: 60px;
  display: grid;
  grid-template-columns: repeat(6, 1fr);

  /* // grid-template-columns: repeat(4, 1fr); */
}
/* .foods-grid { */
/* - In CSS Grid, 1fr means a column will take up the
       remaining space in the grid.
     - If we write 1fr 1fr ... 1fr; 8 times, this will
       divide the grid into 8 columns, each taking up an
       equal amount of the space.
     - repeat(8, 1fr); is a shortcut for repeating "1fr"
       8 times (instead of typing out "1fr" 8 times).
       repeat(...) is a special property that works with
       display: grid; */
/* } */
/* @media is used to create responsive design (making the
   website look good on any screen size). This @media
   means when the screen width is 2000px or less, we
   will divide the grid into 7 columns instead of 8. */
/* @media screen and(maxi-width:) */
/* grid-template-columns: repeat(4, 1fr); */
@media screen and (max-with: 2000px) {
  .main {
    grid-template-columns: repeat(7, 1fr);
  }
}

/* This @media means when  the Screen with is  1600px  or  less
, we will  divide the grid into 6 columns
   */
@media screen and(max-with: 1600px) {
  .main {
    grid-template-columns: repeat(6, 1fr);
  }
}
@media screen and(max-with: 1300px) {
  .main {
    grid-template-columns: repeat(5, 1 fr);
  }
}

@media screen and (max-width: 1000px) {
  .main {
    grid-template-columns: repeat(4, 1fr);
  }
}

@media screen and (max-width: 800px) {
  .main {
    grid-template-columns: repeat(3, 1fr);
  }
}

@media screen and(max-width: 575px) {
  .main {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (max-width: 450px) {
  .main {
    grid-template-columns: 1fr;
  }
}
.food-container {
  padding-top: 40px;
  padding-top: 40px;
  padding-bottom: 25px;
  padding-left: 25px;
  padding-right: 25px;
  margin-top: 10px;
  margin-left: 10px;
  border-radius: 10%;
  border-right: 1px solid rgb(231, 231, 231);
  border-bottom: 1px solid rgb(231, 231, 231);
  display: flex;
  flex-direction: column;
  -webkit-border-radius: 10%;
  -moz-border-radius: 10%;
  -ms-border-radius: 10%;
  -o-border-radius: 10%;
}
.foods-image-container {
  display: flex;
  justify-content: center;
  align-items: center;

  height: 150px;
  margin-bottom: 20px;
}

.food-image {
  /* Images will overflow their container by default. To
    prevent this, we set max-width and max-height to 100%
    so they stay inside their container. */
  max-width: 100%;
  max-height: 100%;
}
.food-name {
  height: 40px;
  margin-bottom: 5px;
}
.food-spacer {
  flex: 1;
}
